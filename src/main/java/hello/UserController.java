package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

@Controller
// ^ This means that this class is a Controller
// UserController name denotes it is the controller for users
//   and the paths listed here are those paths specific to user creation

//Other controllers should have functionality based on or branched from this class
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping(path="/addUser") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String userEmail) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        UserEntity userEntity = new UserEntity();
        userEntity.setName(name);
        userEntity.setUserEmail(userEmail);
        userRepository.save(userEntity);
        return "Saved";
    }

    @GetMapping(path="/getUserIdByUserEmail")
    public @ResponseBody String getUserIdByUserEmail(@RequestParam String userEmail) {
        List<UserEntity> userEntityList = userRepository.findAllByUserEmail(userEmail);
        for(UserEntity userEntity:userEntityList){
            if(userEntity.getUserEmail() == userEmail)
                return userEntity.getUserId().toString();
        }
        return "Did not find user id by userEmail";
    }

    @GetMapping(path="/listAllUsers")
    public @ResponseBody Iterable<UserEntity> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}