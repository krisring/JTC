package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller    // This means that this class is a Controller - UserController name denotes it is the main application controller
//Other controllers should have functionality based on or branched from this class
@RequestMapping(path="/customer") // This means URL's start with /demo (after Application path)
public class CustomerController {
    @Autowired // This means to get the bean called customerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
//    private UserRepository userRepository;
    private CustomerRepository  customerRepository;

    @GetMapping(path="/addCustomerCompany") // Map ONLY GET Requests
    public @ResponseBody String addNewCustomer (@RequestParam String customerCompanyName, @RequestParam String companyEmail) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        CustomerEntity customerEntity = new CustomerEntity();
        customerEntity.setCustomerCompanyName(customerCompanyName);
        customerEntity.setCompanyEmail(companyEmail);
        customerRepository.save(customerEntity);
        return "Saved";
    }

    @GetMapping(path="/listCustomerCompanies")
    public @ResponseBody Iterable<CustomerEntity> getAllCustomerCompanies() {
        // This returns a JSON or XML with the users
        return customerRepository.findAll();
    }

    @GetMapping(path="/addUserToCustomerCompany")
    public @ResponseBody String addUserToCustomerCompany (@RequestParam String userId, @RequestParam Long companyId) {
        //Get userId via looking up through userEmail
//        UserEntity userEntity = new UserEntity();
//        String userId = userRepository.getUserIdByUserEmail(userEmail);
        //Save the user via the userId to the customerCompanyUsers table
        CustomerEntity customerEntity = new CustomerEntity();
        customerEntity.addUser(userId, companyId);
        customerRepository.save(customerEntity);
        return "Saved userId: " + userId + " to companyId: " + companyId;
    }

    @GetMapping(path="/addCustomerCompanyRelation")
    public @ResponseBody String addCustomerCompanyRelation(@RequestParam String companyId, @RequestParam String companyId2){
        CustomerEntity customerEntity = new CustomerEntity();
        customerEntity.setCustomerCompanyRelation(companyId, companyId2);
        customerRepository.save(customerEntity);
        return "Company with id: " + companyId2 + " added to companyRelations of " + companyId;
    }
}